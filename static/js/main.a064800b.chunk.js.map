{"version":3,"sources":["chord-diagram/Svg.jsx","chord-diagram/Groups.jsx","chord-diagram/utils.js","chord-diagram/Ribbons.jsx","chord-diagram/ChordDiagram.jsx","App.js","serviceWorker.js","index.js"],"names":["Svg","width","height","style","className","clearHover","children","resizeWithWindow","onClick","console","log","viewBox","preserveAspectRatio","transform","fillOpacity","event","x","y","getAngle","group","startAngle","endAngle","Groups","componentId","chords","color","arc","outerRadius","setMouseOverGroup","groupLabels","labelColors","disableHover","hoverPersist","setHoverPersist","groups","map","groupIndex","key","onMouseOver","index","onMouseOut","id","fill","stroke","rgb","darker","d","dy","Math","PI","length","textAnchor","isHiddenRibbon","mouseOverGroup","sourceIndex","targetIndex","Ribbons","ribbon","setMouseOverRibbon","mouseOverRibbon","strokeWidth","blurOnHover","ribbonOpacity","ribbonBlurOpacity","chord","chordIndex","hidden","source","target","display","ChordDiagram","props","state","bind","this","setState","persistHoverOnClick","matrix","groupColors","groupOnClick","padAngle","sortGroups","sortSubgroups","sortChords","disableGroupHover","disableRibbonHover","ribbonOnClick","svgOnClick","min","innerRadius","d3Chord","d3Arc","d3Ribbon","radius","scaleOrdinal","domain","range","Component","defaultProps","descending","ribbonHoverOpacity","App","songNames","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a064800b.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport useChartDimensions from \"../hooks/useChartDimensions.js\";\n\nconst Svg = ({\n  width,\n  height,\n  style,\n  className,\n  clearHover,\n  children,\n  resizeWithWindow,\n  onClick,\n}) => {\n  console.log({ width, height });\n  return (\n    <div\n      className=\"svg-container\"\n      style={{\n        ...style,\n        ...(!resizeWithWindow\n          ? { width: `${width}px`, height: `${height}px` }\n          : {}),\n      }}\n    >\n      <svg\n        className={`svg-content ${className}`}\n        viewBox={`-${width / 2} -${height / 2} ${width + 500} ${height + 500}`}\n        preserveAspectRatio={\"xMidYMid meet\"}\n      >\n        <g transform=\"translate(250,250)\">\n          <rect\n            fillOpacity={0}\n            height={height}\n            onClick={(event) => {\n              clearHover();\n              onClick(event);\n            }}\n            width={width}\n            x={`-${width / 2}`}\n            y={`-${height / 2}`}\n          />\n          {children}\n        </g>\n      </svg>\n    </div>\n  );\n};\n\nSvg.propTypes = {\n  width: PropTypes.number,\n  height: PropTypes.number,\n  style: PropTypes.object,\n  children: PropTypes.arrayOf(PropTypes.node),\n  resizeWithWindow: PropTypes.bool,\n};\n\nexport default Svg;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { rgb } from \"d3-color\";\n\nconst getAngle = (group) => (group.startAngle + group.endAngle) / 2;\n\nconst Groups = ({\n  componentId,\n  chords,\n  color,\n  arc,\n  outerRadius,\n  setMouseOverGroup,\n  groupLabels,\n  labelColors,\n  disableHover,\n  hoverPersist,\n  setHoverPersist,\n  onClick,\n}) => (\n  <g className=\"groups\">\n    {chords.groups.map((group, groupIndex) => (\n      <g\n        key={groupIndex}\n        onMouseOver={\n          !disableHover && !hoverPersist\n            ? () => setMouseOverGroup(group.index)\n            : null\n        }\n        onMouseOut={\n          !disableHover && !hoverPersist ? () => setMouseOverGroup(null) : null\n        }\n        onClick={() => {\n          setHoverPersist(!hoverPersist);\n          onClick(group.index);\n        }}\n      >\n        <path\n          id={`component${componentId}-group${groupIndex}`}\n          fill={`${color(groupIndex)}`}\n          stroke={`${rgb(color(groupIndex)).darker()}`}\n          d={arc(group)}\n        />\n\n        <text\n          dy=\".35em\"\n          transform={`rotate(${\n            (getAngle(group) * 180) / Math.PI - 90\n          }) translate(${outerRadius + 10}) ${\n            getAngle(group) > Math.PI ? \"rotate(180)\" : \"\"\n          }`}\n          fill={\n            labelColors.length === 1 ? labelColors[0] : labelColors[groupIndex]\n          }\n          style={{\n            textAnchor:\n              (group.startAngle + group.endAngle) / 2 > Math.PI ? \"end\" : null,\n          }}\n        >\n          {groupLabels[groupIndex]}\n        </text>\n      </g>\n    ))}\n  </g>\n);\n\nGroups.propTypes = {\n  componentId: PropTypes.number.isRequired,\n  chords: PropTypes.array.isRequired,\n  color: PropTypes.func.isRequired,\n  arc: PropTypes.func.isRequired,\n  setMouseOverGroup: PropTypes.func.isRequired,\n  groupLabels: PropTypes.array,\n  labelColors: PropTypes.array,\n  disableHover: PropTypes.bool,\n  persistHoverOnClick: PropTypes.bool,\n  onClick: PropTypes.func,\n};\n\nexport default Groups;\n","/* Determines what ribbons should be hidden while mousing over a group */\nexport const isHiddenRibbon = (mouseOverGroup, sourceIndex, targetIndex) => {\n  return mouseOverGroup !== null\n    ? mouseOverGroup !== sourceIndex && mouseOverGroup !== targetIndex\n    : false;\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { rgb } from \"d3-color\";\n\nimport { isHiddenRibbon } from \"./utils\";\n\nconst Ribbons = ({\n  chords,\n  color,\n  disableHover,\n  ribbon,\n  setMouseOverRibbon,\n  mouseOverGroup,\n  mouseOverRibbon,\n  hoverPersist,\n  setHoverPersist,\n  onClick,\n  strokeWidth,\n  blurOnHover,\n  ribbonOpacity,\n  ribbonBlurOpacity,\n}) => (\n  <g className=\"ribbons\" fillOpacity={ribbonOpacity}>\n    {chords.map((chord, chordIndex) => {\n      const hidden =\n        isHiddenRibbon(\n          mouseOverGroup,\n          chord.source.index,\n          chord.target.index\n        ) || isHiddenRibbon(mouseOverRibbon, chordIndex, null);\n\n      const style = blurOnHover\n        ? { fillOpacity: `${hidden ? ribbonBlurOpacity : ribbonOpacity}` }\n        : {\n            display: `${hidden ? \"none\" : \"block\"}`,\n            fillOpacity: ribbonOpacity,\n          };\n\n      return (\n        <path\n          key={chordIndex}\n          style={style}\n          fill={color(chord.target.index)}\n          stroke={`${rgb(color(chord.target.index)).darker()}`}\n          strokeWidth={strokeWidth}\n          d={`${ribbon({ source: chord.source, target: chord.target })}`}\n          onClick={() => {\n            setHoverPersist(!hoverPersist);\n            onClick(chordIndex);\n          }}\n          onMouseOver={\n            !disableHover && !hoverPersist\n              ? () => setMouseOverRibbon(chordIndex)\n              : null\n          }\n          onMouseOut={\n            !disableHover && !hoverPersist\n              ? () => setMouseOverRibbon(null)\n              : null\n          }\n        />\n      );\n    })}\n  </g>\n);\n\nRibbons.propTypes = {\n  chords: PropTypes.array.isRequired,\n  color: PropTypes.func.isRequired,\n  ribbon: PropTypes.func.isRequired,\n  setMouseOverRibbon: PropTypes.func.isRequired,\n  mouseOverGroup: PropTypes.number,\n  mouseOverRibbon: PropTypes.number,\n  onClick: PropTypes.func,\n  strokeWidth: PropTypes.number,\n  disableHover: PropTypes.bool,\n  blurOnHover: PropTypes.bool,\n};\n\nexport default Ribbons;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { arc } from \"d3-shape\";\nimport { ribbon, chord } from \"d3-chord\";\nimport { scaleOrdinal } from \"d3-scale\";\nimport { range, descending } from \"d3-array\";\n\nimport Svg from \"./Svg\";\nimport Groups from \"./Groups\";\nimport Ribbons from \"./Ribbons\";\n\nimport \"./main.css\";\n\nexport default class ChordDiagram extends Component {\n  static propTypes = {\n    matrix: PropTypes.array.isRequired,\n    componentId: PropTypes.number.isRequired,\n    width: PropTypes.number,\n    height: PropTypes.number,\n    style: PropTypes.object,\n    className: PropTypes.string,\n    outerRadius: PropTypes.number,\n    innerRadius: PropTypes.number,\n    groupLabels: PropTypes.array,\n    groupColors: PropTypes.array,\n    padAngle: PropTypes.number,\n    sortGroups: PropTypes.func,\n    sortSubgroups: PropTypes.func,\n    sortChords: PropTypes.func,\n    labelColors: PropTypes.array,\n    disableHover: PropTypes.bool,\n    disableGroupHover: PropTypes.bool,\n    disableRibbonHover: PropTypes.bool,\n    strokeWidth: PropTypes.number,\n    resizeWithWindow: PropTypes.bool,\n    groupOnClick: PropTypes.func,\n    ribbonOnClick: PropTypes.func,\n    svgOnClick: PropTypes.func,\n    blurOnHover: PropTypes.bool,\n    ribbonOpacity: PropTypes.string,\n    ribbonHoverOpacity: PropTypes.string,\n    persistHoverOnClick: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    matrix: [],\n    componentId: 1,\n    width: 700,\n    height: 700,\n    style: {},\n    className: \"\",\n    outerRadius: null,\n    innerRadius: null,\n    groupLabels: [],\n    groupColors: [],\n    groupOnClick: null,\n    padAngle: 0.05,\n    sortGroups: null,\n    sortSubgroups: descending,\n    sortChords: null,\n    labelColors: [\"#000000\"],\n    disableHover: false,\n    disableGroupHover: false,\n    disableRibbonHover: true,\n    strokeWidth: 1,\n    resizeWithWindow: false,\n    ribbonOnClick: null,\n    blurOnHover: false,\n    ribbonOpacity: \"0.67\",\n    ribbonHoverOpacity: \"0.2\",\n    persistHoverOnClick: false,\n    svgOnClick: null,\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.clearHover = this.clearHover.bind(this);\n    this.setHoverPersist = this.setHoverPersist.bind(this);\n    this.setMouseOverGroup = this.setMouseOverGroup.bind(this);\n    this.setMouseOverRibbon = this.setMouseOverRibbon.bind(this);\n  }\n\n  state = {\n    hoverPersist: false,\n    mouseOverGroup: null,\n    mouseOverRibbon: null,\n  };\n\n  clearHover() {\n    this.setState({\n      hoverPersist: false,\n      mouseOverGroup: null,\n      mouseOverRibbon: null,\n    });\n  }\n\n  setHoverPersist(hoverPersist) {\n    if (this.props.persistHoverOnClick) {\n      this.setState({ hoverPersist });\n    }\n  }\n\n  setMouseOverGroup(mouseOverGroup) {\n    this.setState({ mouseOverGroup });\n  }\n\n  setMouseOverRibbon(mouseOverRibbon) {\n    this.setState({ mouseOverRibbon });\n  }\n\n  render() {\n    const {\n      matrix,\n      componentId,\n      width,\n      height,\n      style,\n      className,\n      groupLabels,\n      groupColors,\n      groupOnClick,\n      padAngle,\n      sortGroups,\n      sortSubgroups,\n      sortChords,\n      labelColors,\n      disableHover,\n      disableGroupHover,\n      disableRibbonHover,\n      strokeWidth,\n      resizeWithWindow,\n      ribbonOnClick,\n      blurOnHover,\n      ribbonOpacity,\n      ribbonBlurOpacity,\n      persistHoverOnClick,\n      svgOnClick,\n    } = this.props;\n\n    const outerRadius =\n      this.props.outerRadius || Math.min(width, height) * 0.5 - 40;\n    const innerRadius = this.props.innerRadius || outerRadius - 30;\n\n    const d3Chord = chord()\n      .padAngle(padAngle)\n      .sortGroups(sortGroups)\n      .sortSubgroups(sortSubgroups)\n      .sortChords(sortChords);\n\n    const chords = d3Chord(matrix);\n\n    const d3Arc = arc().innerRadius(innerRadius).outerRadius(outerRadius);\n\n    const d3Ribbon = ribbon().radius(innerRadius);\n\n    const color = scaleOrdinal()\n      .domain(range(groupColors.length))\n      .range(groupColors);\n\n    return (\n      <Svg\n        width={width}\n        height={height}\n        style={style}\n        className={className}\n        clearHover={this.clearHover}\n        resizeWithWindow={resizeWithWindow}\n        onClick={svgOnClick}\n      >\n        <Groups\n          componentId={componentId}\n          chords={chords}\n          color={color}\n          arc={d3Arc}\n          outerRadius={outerRadius}\n          setMouseOverGroup={this.setMouseOverGroup}\n          groupLabels={groupLabels}\n          labelColors={labelColors}\n          disableHover={disableHover || disableGroupHover}\n          hoverPersist={this.state.hoverPersist}\n          setHoverPersist={this.setHoverPersist}\n          onClick={groupOnClick}\n        />\n\n        <Ribbons\n          chords={chords}\n          color={color}\n          disableHover={disableHover || disableRibbonHover}\n          ribbon={d3Ribbon}\n          setMouseOverRibbon={this.setMouseOverRibbon}\n          mouseOverGroup={this.state.mouseOverGroup}\n          mouseOverRibbon={this.state.mouseOverRibbon}\n          strokeWidth={strokeWidth}\n          hoverPersist={this.state.hoverPersist}\n          setHoverPersist={this.setHoverPersist}\n          onClick={ribbonOnClick}\n          blurOnHover={blurOnHover}\n          ribbonOpacity={ribbonOpacity}\n          ribbonBlurOpacity={ribbonBlurOpacity}\n        />\n      </Svg>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport ChordDiagram from \"./chord-diagram/ChordDiagram.jsx\";\nimport matrix from \"./data/matrix.json\";\nimport songNames from \"./data/songNames.json\";\nimport _ from \"lodash\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Themes in Les Miserables</h1>\n      <ChordDiagram\n        matrix={matrix}\n        componentId={1}\n        groupLabels={songNames}\n        groupColors={[\"#000000\", \"#FFDD89\", \"#957244\", \"#F26223\"]}\n        resizeWithWindow={true}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}